package com.example.demo.leetcode.i;

import java.util.HashSet;

/**
 * Description: 数独， 判断已存在的数值是否有效
 * 1.数字 1-9 在每一行只能出现一次。
 * 2.数字 1-9 在每一列只能出现一次。
 * 3.数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 *
 * ps1: 输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 *
 * ps2: 输入：board =
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：false
 *
 * @author Zeti
 * @date 2022/1/17 11:38 AM
 */
public class Sudoku {

    public static void main(String[] args) {
        int[][] a1 =
                {{5, 3, 0, 0, 7, 0, 0, 0, 0},
                 {6, 0, 0, 1, 9, 5, 0, 0, 0},
                 {0, 9, 8, 0, 0, 0, 0, 6, 0},
                 {8, 0, 0, 0, 6, 0, 0, 0, 3},
                 {4, 0, 0, 8, 0, 3, 0, 0, 1},
                 {7, 0, 0, 0, 2, 0, 0, 0, 6},
                 {0, 6, 0, 0, 0, 0, 2, 8, 0},
                 {0, 0, 0, 4, 1, 9, 0, 0, 5},
                 {0, 0, 0, 0, 8, 0, 0, 7, 9}};

        int[][] a2 =
                {{5, 3, 0, 0, 7, 0, 0, 0, 0},
                 {6, 0, 0, 1, 9, 5, 0, 0, 0},
                 {0, 9, 8, 0, 0, 0, 0, 6, 0},
                 {8, 0, 0, 0, 6, 0, 0, 0, 3},
                 {4, 0, 0, 8, 0, 3, 0, 0, 1},
                 {7, 0, 0, 0, 2, 0, 0, 0, 6},
                 {0, 6, 0, 0, 0, 0, 7, 8, 0},
                 {0, 0, 0, 4, 1, 9, 0, 0, 5},
                 {0, 0, 0, 0, 8, 0, 0, 7, 9}};

        System.err.println(sd1(a1));
        System.err.println(sd1(a2));

    }


    public static boolean sd1(int[][] a) {

        for (int i = 0; i < a.length; i++) {
//            System.err.println("--------》》》  一层循环");
            HashSet stLine = new HashSet();
            HashSet stList = new HashSet();
            HashSet stGrid = new HashSet();

            for (int j = 0; j < a.length; j++) {
//                System.err.println("--------》》  二层循环");

                // 行
                if (a[i][j] != 0 && !stLine.add(a[i][j])) {
                    return  false;
                }

                // 列
                if (a[j][i] != 0 && !stList.add(a[j][i])) {
                    return  false;
                }

                int x = (i / 3) * 3 + j / 3;
                int y = (i % 3) * 3 + j % 3;

//                int x = j / 3;
//                int y = j % 3;
//                System.err.println("--> " + x);
//                System.err.println("--> " + y);

                if(a[x][y] != 0 && !stGrid.add(a[x][y])){
                    return false;
                }
            }
        }

        return true;
    }







}
